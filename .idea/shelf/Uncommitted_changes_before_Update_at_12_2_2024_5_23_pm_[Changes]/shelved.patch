Index: templates/base3.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>{% block title %}{% endblock %}</title>\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css\" rel=\"stylesheet\">\r\n\r\n    <!-- Font -->\r\n    <style>\r\n        @import url('https://fonts.googleapis.com/css2?family=Raleway:ital,wght@0,300;0,500;1,300&display=swap');\r\n    </style>\r\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='/css/navbar.css') }}\">\r\n\r\n    <!-- Bootstrap 5.1.3 CSS-->\r\n    <link crossorigin=\"anonymous\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" rel=\"stylesheet\">\r\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='/css/style.css') }}\">\r\n</head>\r\n<body>\r\n    <nav class=\"navbar navbar-expand-sm bg-dark navbar-dark\">\r\n      <div class=\"container-fluid\">\r\n        <a class=\"navbar-brand\" href=\"/\">VegeGrove</a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapsibleNavbar\">\r\n          <span class=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div class=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\r\n          <ul class=\"navbar-nav me-auto\">\r\n            <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"/\">Home</a>\r\n            </li>\r\n            <li class=\"nav-item dropdown\">\r\n              <a class=\"nav-link dropdown-toggle\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\">Events </a>\r\n              <ul class=\"dropdown-menu\">\r\n                <li><a class=\"dropdown-item\" href=\"/retrieveEvents\">View Events</a></li>\r\n                <li><a class=\"dropdown-item\" href=\"{{ url_for('main.usersignedup')}}\">User's SignedUp</a></li>\r\n              </ul>\r\n            </li>\r\n            <li class=\"nav-item dropdown\">\r\n              <a class=\"nav-link dropdown-toggle\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\">Reviews </a>\r\n              <ul class=\"dropdown-menu\">\r\n                <li><a class=\"dropdown-item\" href=\"/retrieveReviews\">Retrieve Reviews</a></li>\r\n              </ul>\r\n            </li>\r\n            <li class=\"nav-item dropdown\">\r\n              <a class=\"nav-link dropdown-toggle\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\">Product</a>\r\n              <ul class=\"dropdown-menu\">\r\n                <li><a href=\"{{url_for('store_page')}}\">View Products</a></li>\r\n                <li><a href=\"{{url_for('cart_page')}}\">View Cart</a></li>\r\n              </ul>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <a class=\"nav-link\" href=\"/responseManagement\">Donation Management</a>\r\n            </li>\r\n          </ul>\r\n          <ul class=\"navbar-nav\"> <!-- This ul is for the user section, push it to the right -->\r\n                <li class=\"nav-item\">\r\n                    <div class=\"user\">\r\n                        <a href=\"#\" class=\"nav-link\"><span class=\"bi bi-person\" onclick=\"toggleuser()\" style=\"font-size: 1.5em;\"></span> </a>\r\n                        <div id=\"userApplet\" class=\"user-applet\">\r\n                            <h3 style=\"display: inline\">Profile</h3>\r\n                            <div class=\"user-item\">\r\n                                <button class=\"logout\" onclick=\"logout()\"><span class=\"glyphicon glyphicon-log-in\"></span>Logout</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    </nav>\r\n\r\n    <script>\r\n         function logout() {\r\n            // Add any logout logic or redirect here\r\n            window.location.href = \"{{ url_for('auth.logout') }}\";\r\n        }\r\n\r\n        function toggleuser() {\r\n            var userApplet = document.getElementById('userApplet');\r\n            userApplet.style.display = (userApplet.style.display === 'block') ? 'none' : 'block';\r\n        }\r\n    </script>\r\n\r\n    <div class=\"container-fluid\">\r\n        {% block content %}\r\n        {% endblock %}\r\n    </div>\r\n\r\n    {% block scripts %}\r\n    <!-- Popper 2.10.2, Bootstrap 5.1.3 JavaScript -->\r\n    <script crossorigin=\"anonymous\" integrity=\"sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB\" src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js\"></script>\r\n    <script crossorigin=\"anonymous\" integrity=\"sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13\" src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js\"></script>\r\n    {% endblock %}\r\n</body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/base3.html b/templates/base3.html
--- a/templates/base3.html	(revision 9f87c590ee37b30535a7f4ac1499559fb6e6aefe)
+++ b/templates/base3.html	(date 1707727080766)
@@ -38,7 +38,9 @@
             <li class="nav-item dropdown">
               <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">Reviews </a>
               <ul class="dropdown-menu">
-                <li><a class="dropdown-item" href="/retrieveReviews">Retrieve Reviews</a></li>
+                  <li><a href="{{url_for('view_user_review')}}">View Reviews</a></li>
+                  <li><a href="{{url_for('create_reply')}}">Create Reply</a></li>
+                  <li><a href="{{url_for('view_replys')}}">View Replies</a></li>
               </ul>
             </li>
             <li class="nav-item dropdown">
Index: __init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import mailbox\r\nimport bcrypt as Bcrypt\r\nfrom flask import Flask, render_template, request, redirect, url_for\r\nfrom flask_login import LoginManager\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom main import *\r\nfrom werkzeug.utils import secure_filename\r\nimport os, shelve, Response, eventManagement, Purchase, userEvents\r\nfrom Forms import CreateCheckoutForm, CreateUpdateForm, CreateProductForm, CreateReviewForm, CreateEventForm, \\\r\n    CheckInForm, CreateUpdateForm2, CreateCheckoutForm2, RegsisterForm\r\nimport Review, Cart, Store, Product\r\n\r\napp = Flask(__name__)\r\n\r\n\r\ndef create_app():\r\n    # app = Flask(__name__)\r\n    app.config['SECRET_KEY'] = '9OLWxND4o83j4K4iuopO'\r\n    app.config['SQLALCHEMY_DATABASE_URI'] = \"sqlite:///database.db\"\r\n\r\n    db.init_app(app)\r\n\r\n    with app.app_context():\r\n        db.create_all()\r\n\r\n        login_manager = LoginManager()\r\n        login_manager.login_view = 'auth.login'\r\n        login_manager.init_app(app)\r\n\r\n        from models import User\r\n\r\n        @login_manager.user_loader\r\n        def load_user(user_id):\r\n            return db.session.get(User, user_id)\r\n\r\n        from auth import auth as auth_blueprint\r\n        app.register_blueprint(auth_blueprint)\r\n\r\n        from main import main as main_blueprint\r\n        app.register_blueprint(main_blueprint)\r\n\r\n        from admin import admin as admin_blueprint\r\n        app.register_blueprint(admin_blueprint)\r\n\r\n    app.run(debug=True, port=8000)\r\n\r\nclass Product:\r\n    count_id = 0\r\n\r\n    def __init__(self, name, price, image):\r\n        Product.count_id += 1\r\n        self.name = name\r\n        self.price = price\r\n        self.image = image\r\n\r\n\r\n\r\nclass Store:\r\n    def __init__(self):\r\n        self.products = shelve.open('products.db', writeback=True)\r\n\r\n    def add_product(self, product):\r\n        self.products[product.name] = product\r\n\r\n    def get_product(self, name):\r\n        print(self.products.get(name))\r\n        return self.products.get(name)\r\n\r\n    def get_all_products(self):\r\n        return list(self.products.values())\r\n\r\n    def close(self):\r\n        self.products.close()\r\n\r\n\r\nclass Cart:\r\n    def __init__(self):\r\n        self.carts = shelve.open('carts.db', writeback=True)\r\n        self.items = {}\r\n\r\n    def save_cart(self, id):\r\n        self.carts[id] = self.items\r\n\r\n    def get_cart(self):\r\n        return self.carts['1']\r\n\r\n    def add_item(self, id, product):\r\n        if '1' in self.carts:\r\n            items = self.carts[id]\r\n            if product.name in items:\r\n                items[product.name]['quantity'] += 1\r\n            else:\r\n                items[product.name] = {'product': product, 'quantity': 1}\r\n            print(items)\r\n            self.carts[id] = items\r\n        else:\r\n            self.items[product.name] = {'product': product, 'quantity': 1}\r\n            self.carts[id] = self.items\r\n\r\n    def remove_item(self, id, product):\r\n        items = self.carts[id]\r\n        if product.name in items:\r\n            if items[product.name]['quantity'] > 1:\r\n                items[product.name]['quantity'] -= 1\r\n            else:\r\n                del items[product.name]\r\n        self.carts[id] = items\r\n\r\n    def get_items(self):\r\n        return list(self.items.values())\r\n\r\n    def clear(self):\r\n        self.items = {}\r\n\r\n    def close(self):\r\n        self.carts.close()\r\n\r\n\r\n@app.route('/store')\r\ndef store_page():\r\n    store = Store()\r\n    product = Product(\"tomato seed\", 99999999, '../static/img/tomato seed.jpeg')\r\n    store.add_product(product)\r\n    product = Product(\"potato seed\", 9999, '../static/img/potato seed.jpg')\r\n    store.add_product(product)\r\n    products = store.get_all_products()\r\n    store.close()\r\n    reviews_dict = {}\r\n    db = shelve.open('review.db', 'r')\r\n    reviews_dict = db['Reviews']\r\n    db.close()\r\n    reviews_list = []\r\n    for key in reviews_dict:\r\n        review = reviews_dict.get(key)\r\n        reviews_list.append(review)\r\n\r\n    return render_template('store.html', products=products, count=len(reviews_list), reviews_list=reviews_list)\r\n\r\n\r\n@app.route('/add_to_cart', methods=['POST'])\r\ndef add_to_cart():\r\n    store = Store()\r\n    cart = Cart()\r\n    product_name = request.form['product_name']\r\n    product = store.get_product(product_name)\r\n    cart.add_item('1', product)\r\n    store.close()\r\n    cart.close()\r\n    return redirect(url_for('cart_page'))\r\n\r\n\r\n@app.route('/cart')\r\ndef cart_page():\r\n    cart = Cart()\r\n    items = list(cart.get_cart().values())\r\n\r\n    # Calculate total price\r\n    total_price = sum(item['product'].price * item['quantity'] for item in items)\r\n\r\n    print(items)\r\n    cart.close()\r\n\r\n    return render_template('cart.html', items=items, total_price=total_price)\r\n\r\n\r\n@app.route('/remove_from_cart', methods=['POST'])\r\ndef remove_from_cart():\r\n    product_name = request.form['product_name']\r\n\r\n    store = Store()\r\n    cart = Cart()\r\n    print(store.get_all_products())\r\n    product = store.get_product(product_name)\r\n    cart.get_cart()\r\n    cart.remove_item('1', product)\r\n    store.close()\r\n    cart.close()\r\n    return redirect(url_for('cart_page'))\r\n\r\n\r\n@app.route('/createReview', methods=['GET', 'POST'])\r\ndef create_review():\r\n    create_review_form = CreateReviewForm(request.form)\r\n\r\n    if request.method == 'POST' and create_review_form.validate():\r\n        reviews_dict = {}\r\n        db = shelve.open('review.db', 'c')\r\n\r\n        try:\r\n            reviews_dict = db['Reviews']\r\n        except:\r\n            print(\"Error in retrieving Reviews from review.db.\")\r\n\r\n        review = Review.Review(create_review_form.customer_name.data, create_review_form.product_name.data,\r\n                               create_review_form.rating.data, create_review_form.email.data,\r\n                               create_review_form.review_date.data, create_review_form.comments.data)\r\n        reviews_dict[review.get_review_id()] = review\r\n        db['Reviews'] = reviews_dict\r\n\r\n        db.close()\r\n\r\n        return redirect(url_for('retrieve_reviews'))\r\n\r\n    return render_template('createReview.html', form=create_review_form)\r\n\r\n\r\n@app.route('/retrieveReviews')\r\ndef retrieve_reviews():\r\n    reviews_dict = {}\r\n    db = shelve.open('review.db', 'r')\r\n    reviews_dict = db['Reviews']\r\n    db.close()\r\n    reviews_list = []\r\n    for key in reviews_dict:\r\n        review = reviews_dict.get(key)\r\n        reviews_list.append(review)\r\n\r\n    return render_template('retrieveReviews.html', count=len(reviews_list), reviews_list=reviews_list)\r\n\r\n\r\n@app.route('/updateReview/<int:id>/', methods=['GET', 'POST'])\r\ndef update_review(id):\r\n    update_review_form = CreateReviewForm(request.form)\r\n\r\n    if request.method == 'POST' and update_review_form.validate():\r\n        reviews_dict = {}\r\n        db = shelve.open('review.db', 'w')\r\n        reviews_dict = db['Reviews']\r\n\r\n        review = reviews_dict.get(id)\r\n        review.set_customer_name(update_review_form.customer_name.data)\r\n        review.set_product_name(update_review_form.product_name.data)\r\n        review.set_rating(update_review_form.rating.data)\r\n        review.set_email(update_review_form.email.data)\r\n        review.set_review_date(update_review_form.review_date.data)\r\n        review.set_comments(update_review_form.comments.data)\r\n\r\n        db['Reviews'] = reviews_dict\r\n        db.close()\r\n\r\n        return redirect(url_for('retrieve_reviews'))\r\n    else:\r\n        reviews_dict = {}\r\n        db = shelve.open('review.db', 'r')\r\n        reviews_dict = db['Reviews']\r\n        db.close()\r\n\r\n        review = reviews_dict.get(id)\r\n        update_review_form.customer_name.data = review.get_customer_name()\r\n        update_review_form.product_name.data = review.get_product_name()\r\n        update_review_form.rating.data = review.get_rating()\r\n        update_review_form.email.data = review.get_email()\r\n        update_review_form.review_date.data = review.get_review_date()\r\n        update_review_form.comments.data = review.get_comments()\r\n\r\n        return render_template('updateReview.html', form=update_review_form)\r\n\r\n\r\n@app.route('/deleteReview/<int:id>', methods=['POST'])\r\ndef delete_review(id):\r\n    reviews_dict = {}\r\n    db = shelve.open('review.db', 'w')\r\n    reviews_dict = db.get('Reviews', {})\r\n\r\n    reviews_dict.pop(id)\r\n\r\n    db['Reviews'] = reviews_dict\r\n\r\n    db.close()\r\n\r\n    return redirect(url_for('retrieve_reviews'))\r\n\r\n\r\n@app.route('/review')\r\ndef reply_review():\r\n    reviews_dict = {}\r\n    db = shelve.open('review.db', 'r')\r\n    reviews_dict = db['Reviews']\r\n    db.close()\r\n    reviews_list = []\r\n    for key in reviews_dict:\r\n        review = reviews_dict.get(key)\r\n        reviews_list.append(review)\r\n\r\n    return render_template('productmanagement.html', count=len(reviews_list), reviews_list=reviews_list)\r\n\r\n\r\n# Event management - Admin\r\n@app.route('/createEvents', methods=['GET', 'POST'])\r\ndef create_events():\r\n    create_event_form = CreateEventForm(request.form)\r\n\r\n    if request.method == 'POST' and create_event_form.validate():\r\n\r\n        eventManagement_dict = {}\r\n        db = shelve.open('eventManagement.db', 'c')\r\n\r\n        try:\r\n            eventManagement_dict = db['Events']\r\n        except:\r\n            print(\"Error in retrieving Events from eventManagement.db.\")\r\n\r\n        event = eventManagement.eventManagement(create_event_form.name.data, create_event_form.date.data,\r\n                                                create_event_form.timing.data, create_event_form.location.data,\r\n                                                create_event_form.description.data,\r\n                                                create_event_form.budget.data, create_event_form.collaborators.data,\r\n                                                create_event_form.person_in_charge.data)\r\n        eventManagement_dict[event.get_event_id()] = event\r\n        db['Events'] = eventManagement_dict\r\n\r\n        db.close()\r\n\r\n        return redirect(url_for('retrieve_events'))\r\n    return render_template('createEvents.html', form=create_event_form, )\r\n\r\n\r\n@app.route('/retrieveEvents')\r\ndef retrieve_events():\r\n    eventManagement_dict = {}\r\n    try:\r\n        db = shelve.open('eventManagement.db', 'r')\r\n        if 'Events' in db:\r\n            eventManagement_dict = db['Events']\r\n        else:\r\n            db['Events'] = eventManagement_dict\r\n        db.close()\r\n    except:\r\n        print(\"eventManagement.db not found\")\r\n\r\n    events_list = []\r\n    for key in eventManagement_dict:\r\n        events = eventManagement_dict.get(key)\r\n        events_list.append(events)\r\n\r\n    return render_template('retrieveEvents.html', count=len(events_list), events_list=events_list)\r\n\r\n\r\n@app.route('/updateEvents/<int:id>/', methods=['GET', 'POST'])\r\ndef update_events(id):\r\n    update_event_form = CreateEventForm(request.form)\r\n    if request.method == 'POST' and update_event_form.validate():\r\n        eventManagement_dict = {}\r\n        db = shelve.open('eventManagement.db', 'w')\r\n        eventManagement_dict = db['Events']\r\n\r\n        event = eventManagement_dict.get(id)\r\n        event.set_name(update_event_form.name.data)\r\n        event.set_date(update_event_form.date.data)\r\n        event.set_timing(update_event_form.timing.data)\r\n        event.set_location(update_event_form.location.data)\r\n        event.set_description(update_event_form.description.data)\r\n        event.set_budget(update_event_form.budget.data)\r\n        event.set_person_in_charge(update_event_form.person_in_charge.data)\r\n        event.set_collaborators(update_event_form.collaborators.data)\r\n\r\n        db['Events'] = eventManagement_dict\r\n        db.close()\r\n\r\n        return redirect(url_for('retrieve_events'))\r\n    else:\r\n        eventManagement_dict = {}\r\n        db = shelve.open('eventManagement.db', 'r')\r\n        eventManagement_dict = db['Events']\r\n        db.close()\r\n\r\n        event = eventManagement_dict.get(id)\r\n        update_event_form.name.data = event.get_name()\r\n        update_event_form.date.data = event.get_date()\r\n        update_event_form.timing.data = event.get_timing()\r\n        update_event_form.location.data = event.get_location()\r\n        update_event_form.description.data = event.get_description()\r\n        update_event_form.budget.data = event.get_budget()\r\n        update_event_form.person_in_charge.data = event.get_person_in_charge()\r\n        update_event_form.collaborators.data = event.get_collaborators()\r\n\r\n        return render_template('updateEvents.html', form=update_event_form)\r\n\r\n\r\n@app.route('/deleteEvent/<int:id>', methods=['POST'])\r\ndef delete_event(id):\r\n    eventManagement = {}\r\n    db = shelve.open('eventManagement.db', 'w')\r\n    eventManagement_dict = db['Events']\r\n\r\n    eventManagement_dict.pop(id)\r\n\r\n    db['Events'] = eventManagement_dict\r\n    db.close()\r\n\r\n    return redirect(url_for('retrieve_events'))\r\n\r\n\r\n# Events- User side\r\n\r\n@app.route('/discoverEvents_confirmation')\r\ndef discoverEvents_confirmation():\r\n    return render_template('discoverEvents_confirmation.html')\r\n\r\n\r\n@app.route('/retrieveDiscoverEvents', methods=['GET', 'POST'])\r\ndef createDiscoverEvents():\r\n    discovereventsform = RegsisterForm(request.form)\r\n    if request.method == 'POST' and discovereventsform.validate():\r\n        discoverEvents_dict = {}\r\n        discovereventsdb = shelve.open('discoverevents.db', 'c')\r\n\r\n        try:\r\n            discoverEvents_dict = discovereventsdb['discoverevents']\r\n        except:\r\n            print(\"Error in retrieving discoverevents from discoverevents.db\")\r\n\r\n        discoverEvents = userEvents.CheckIn(discovereventsform.name.data, discovereventsform.email.data)\r\n        discoverEvents_dict[discoverEvents.get_checkin_id()] = discoverEvents\r\n        discovereventsdb['discoverevents'] = discoverEvents_dict\r\n\r\n        discovereventsdb.close()\r\n    else:\r\n        return render_template('retrieveDiscoverEvents.html', form=discovereventsform)\r\n\r\n\r\ndef retrieveDiscoverEvents():\r\n    discoverEvents_dict = {}\r\n    try:\r\n        discovereventsdb = shelve.open('discoverevents.db', 'r')\r\n        if 'discoverevents' in discoverEvents_dict:\r\n            discoverEvents_dict = discovereventsdb['discoverevents']\r\n        else:\r\n            discovereventsdb['discoverevents'] = discoverEvents_dict\r\n        discovereventsdb.close()\r\n\r\n    except:\r\n        print(\"discoverevents.db not found\")\r\n\r\n    discoverevents_list = []\r\n    for key in discoverevents_list:\r\n        discoverevents = discoverEvents_dict.get(key)\r\n        discoverevents_list.append(discoverevents)\r\n\r\n    return render_template('retrieveDiscoverEvents.html', count=len(discoverevents_list),\r\n                           discoverevents_list=discoverevents_list)\r\n\r\n\r\n@app.route('/retrieveUserEvents')\r\ndef createUserCheckIn():\r\n    create_checkIn_form = CheckInForm(request.form)\r\n    if request.method == 'POST' and create_checkIn_form.validate():\r\n        userCheckIn_dict = {}\r\n        db = shelve.open('usercheckIn.db', 'c')\r\n\r\n        try:\r\n            userCheckIn_dict = db['userCheckIn']\r\n\r\n        except:\r\n            print(\"Error in retrieving userCheckIn from usercheckIn.db\")\r\n\r\n        userCheckIn = userEvents.CheckIn(create_checkIn_form.name.data, create_checkIn_form.email.data)\r\n        userCheckIn_dict[userCheckIn.get_checkin_id()] = userCheckIn\r\n        db['userCheckIn'] = userCheckIn_dict\r\n\r\n        db.close()\r\n\r\n    else:\r\n        return render_template('retrieveUserEvents.html', form=create_checkIn_form)\r\n\r\ndef retrieveUserCheckIn():\r\n    userCheckIn_dict = {}\r\n    try:\r\n        db = shelve.open('userCheckIn.db', 'r')\r\n        if 'userCheckIn' in db:\r\n            userCheckIn_dict = db['userCheckIns']\r\n        else:\r\n            db['userCheckIn'] = userCheckIn_dict\r\n        db.close()\r\n    except:\r\n        print('userCheckIn.db not found')\r\n\r\n    userCheckIn_list = []\r\n    for key in userCheckIn_list:\r\n        userCheckIn = userCheckIn_dict.get(key)\r\n        userCheckIn_dict.append(userCheckIn)\r\n\r\n    return render_template('retrieveUserEvents.html', count=len(userCheckIn_list),\r\n                           userCheckIn_list=userCheckIn_list)\r\n\r\n@app.route('/userevent_confirmation', methods=['GET', 'POST'])\r\ndef userevent_confirmation():\r\n    return render_template('confirmation.html')\r\n\r\n\r\n\r\n@app.route(\"/upload_file\", methods=[\"POST\"])\r\ndef upload_file():\r\n    file = request.files[\"file\"]\r\n\r\n    if file and allowed_file(file.filename):  # Add file extension validation\r\n        filename = secure_filename(file.filename)\r\n\r\n        # Save file data using shelve\r\n        with shelve.open(\"files\", \"c\") as db:\r\n            db[filename] = file.read()\r\n\r\n        flash(\"File uploaded successfully!\")\r\n    else:\r\n        flash(\"Invalid file format or error during processing.\")\r\n    return redirect('/userevent_confirmation')\r\n\r\n\r\n# Define allowed file extensions (optional)\r\ndef allowed_file(filename):\r\n    ALLOWED_EXTENSIONS = [\"png\", \"jpeg\", \"jpg\"]  # Add your allowed extensions\r\n    return '.' in filename and filename.rsplit('.', 1)[1].upper() in ALLOWED_EXTENSIONS\r\n\r\n\r\n@app.route('/donation')\r\n# get method to get donation page\r\ndef donation():\r\n    return render_template(\"donation.html\")\r\n\r\n\r\n@app.route('/success')\r\ndef success():\r\n    return render_template(\"success.html\")\r\n\r\n\r\n@app.route('/success2')\r\ndef success2():\r\n    return render_template(\"success2.html\")\r\n\r\n\r\n@app.route('/checkout', methods=['GET', 'POST'])\r\n# accepts both get and post methods, checkout page is retrieved\r\n# when form is received, data will be posted onto the server\r\ndef response():\r\n    # Retrieve the 'amount' parameter\r\n    amount = request.args.get('amount')\r\n    create_checkout_form = CreateCheckoutForm(request.form)  # class object, calls server and passes in request\r\n    default_amount = amount\r\n    # Set the default value for amount\r\n    create_checkout_form.amount.data = default_amount\r\n\r\n    if request.method == 'POST' and create_checkout_form.validate():\r\n        responses_dict = {}\r\n        db = shelve.open('response.db', 'c')\r\n\r\n        try:\r\n            responses_dict = db['Responses']\r\n        except:\r\n            print(\"Error in retrieving Responses from response.db.\")\r\n\r\n        response = Response.Response(create_checkout_form.fname.data, create_checkout_form.lname.data,\r\n                                     create_checkout_form.phone.data, create_checkout_form.email.data,\r\n                                     create_checkout_form.add1.data, create_checkout_form.add2.data,\r\n                                     create_checkout_form.pcode.data, create_checkout_form.dmethod.data,\r\n                                     create_checkout_form.amount.data)\r\n        responses_dict[response.get_response_id()] = response\r\n\r\n        db['Responses'] = responses_dict\r\n\r\n        db.close()\r\n\r\n        return redirect(url_for('success'))\r\n\r\n    return render_template('checkout.html', form=create_checkout_form, customAmount=amount)\r\n\r\n\r\n@app.route('/responseManagement')\r\ndef response_management():\r\n    responses_dict = {}\r\n    db = shelve.open('response.db', 'r')\r\n    responses_dict = db['Responses']\r\n    db.close()\r\n\r\n    responses_list = []\r\n    for key in responses_dict:\r\n        response = responses_dict.get(key)\r\n        responses_list.append(response)\r\n\r\n    return render_template('responseManagement.html', count=len(responses_list), responses_list=responses_list)\r\n\r\n\r\n@app.route('/updateResponse/<int:id>/', methods=['GET', 'POST'])\r\ndef update_response(id):\r\n    update_checkout_form = CreateUpdateForm(request.form)\r\n    if request.method == 'POST' and update_checkout_form.validate():\r\n        responses_dict = {}\r\n        db = shelve.open('response.db', 'w')\r\n        responses_dict = db['Responses']\r\n\r\n        response = responses_dict.get(id)\r\n        response.set_fname(update_checkout_form.fname.data)\r\n        response.set_lname(update_checkout_form.lname.data)\r\n        response.set_phone(update_checkout_form.phone.data)\r\n        response.set_email(update_checkout_form.email.data)\r\n        response.set_add1(update_checkout_form.add1.data)\r\n        response.set_add2(update_checkout_form.add2.data)\r\n        response.set_pcode(update_checkout_form.pcode.data)\r\n        response.set_dmethod(update_checkout_form.dmethod.data)\r\n\r\n        db['Responses'] = responses_dict\r\n        db.close()\r\n\r\n        return redirect(url_for('response_management'))\r\n    else:\r\n        responses_dict = {}\r\n        db = shelve.open('response.db', 'r')\r\n        responses_dict = db['Responses']\r\n        db.close()\r\n\r\n        response = responses_dict.get(id)\r\n        update_checkout_form.fname.data = response.get_fname()\r\n        update_checkout_form.lname.data = response.get_lname()\r\n        update_checkout_form.phone.data = response.get_phone()\r\n        update_checkout_form.email.data = response.get_email()\r\n        update_checkout_form.add1.data = response.get_add1()\r\n        update_checkout_form.add2.data = response.get_add2()\r\n        update_checkout_form.pcode.data = response.get_pcode()\r\n        update_checkout_form.dmethod.data = response.get_dmethod()\r\n\r\n    return render_template('updateResponse.html', form=update_checkout_form)\r\n\r\n\r\n@app.route('/deleteResponse/<int:id>', methods=['POST'])\r\ndef delete_response(id):\r\n    responses_dict = {}\r\n    db = shelve.open('response.db', 'w')\r\n    responses_dict = db['Responses']\r\n\r\n    responses_dict.pop(id)\r\n\r\n    db['Responses'] = responses_dict\r\n    db.close()\r\n\r\n    return redirect(url_for('response_management'))\r\n\r\n\r\n@app.route('/createProduct', methods=['GET', 'POST'])\r\n# accepts both get and post methods, createProduct page is retrieved\r\n# when form is received, data will be posted onto the server\r\ndef create_product():\r\n    create_product_form = CreateProductForm(request.form)  # class object, calls server and passes in request\r\n    if request.method == 'POST' and create_product_form.validate():\r\n\r\n        products_dict = {}\r\n        db = shelve.open('product.db', 'c')\r\n\r\n        try:\r\n            products_dict = db['Products']\r\n        except:\r\n            print(\"Error in retrieving Products from product.db.\")\r\n\r\n        product = Product.Product(create_product_form.name.data, create_product_form.price.data,\r\n                         create_product_form.description.data, create_product_form.tags.data)\r\n        products_dict[product.get_product_id()] = product\r\n        db['Products'] = products_dict\r\n\r\n        db.close()\r\n\r\n        return redirect(url_for('product_management'))\r\n    return render_template('createProduct.html', form=create_product_form)\r\n\r\n\r\n@app.route('/productManagement')\r\ndef product_management():\r\n    products_dict = {}\r\n    db = shelve.open('product.db', 'r')\r\n    products_dict = db['Products']\r\n    db.close()\r\n\r\n    products_list = []\r\n    for key in products_dict:\r\n        product = products_dict.get(key)\r\n        products_list.append(product)\r\n\r\n    return render_template('productManagement.html', count=len(products_list), products_list=products_list)\r\n\r\n\r\n@app.route('/updateProduct/<int:id>/', methods=['GET', 'POST'])\r\ndef update_product(id):\r\n    update_product_form = CreateProductForm(request.form)\r\n    if request.method == 'POST' and update_product_form.validate():\r\n        products_dict = {}\r\n        db = shelve.open('product.db', 'w')\r\n        products_dict = db['Products']\r\n\r\n        product = products_dict.get(id)\r\n        product.set_name(update_product_form.name.data)\r\n        product.set_price(update_product_form.price.data)\r\n        product.set_description(update_product_form.description.data)\r\n        product.set_tags(update_product_form.tags.data)\r\n\r\n        db['Products'] = products_dict\r\n        db.close()\r\n\r\n        return redirect(url_for('product_management'))\r\n    else:\r\n        products_dict = {}\r\n        db = shelve.open('product.db', 'r')\r\n        products_dict = db['Products']\r\n        db.close()\r\n\r\n        product = products_dict.get(id)\r\n        update_product_form.name.data = product.get_name()\r\n        update_product_form.price.data = product.get_price()\r\n        update_product_form.description.data = product.get_description()\r\n        update_product_form.tags.data = product.get_tags()\r\n\r\n        return render_template('updateProduct.html', form=update_product_form)\r\n\r\n\r\n@app.route('/deleteProduct/<int:id>', methods=['POST'])\r\ndef delete_product(id):\r\n    products_dict = {}\r\n    db = shelve.open('product.db', 'w')\r\n    products_dict = db['Products']\r\n\r\n    products_dict.pop(id)\r\n\r\n    db['Products'] = products_dict\r\n    db.close()\r\n\r\n    return redirect(url_for('product_management'))\r\n\r\n\r\n# Product checkout\r\n@app.route('/checkout2', methods=['GET', 'POST'])\r\n# accepts both get and post methods, checkout page is retrieved\r\n# when form is received, data will be posted onto the server\r\ndef purchase():\r\n    create_checkout_form2 = CreateCheckoutForm2(request.form)  # class object, calls server and passes in request\r\n    # Supposed to retrieve the 'amount' parameter from products, I just leave it as 50 for now\r\n    default_amount = 50\r\n    create_checkout_form2.amount.data = default_amount\r\n\r\n    if request.method == 'POST' and create_checkout_form2.validate():\r\n        purchases_dict = {}\r\n        db = shelve.open('purchase.db', 'c')\r\n\r\n        try:\r\n            purchases_dict = db['Purchases']\r\n        except:\r\n            print(\"Error in retrieving Purchases from purchase.db.\")\r\n\r\n        purchase = Purchase.Purchase(create_checkout_form2.fname.data, create_checkout_form2.lname.data,\r\n                                     create_checkout_form2.phone.data, create_checkout_form2.email.data,\r\n                                     create_checkout_form2.add1.data, create_checkout_form2.add2.data,\r\n                                     create_checkout_form2.pcode.data, create_checkout_form2.dmethod.data,\r\n                                     create_checkout_form2.amount.data)\r\n        purchases_dict[purchase.get_purchase_id()] = purchase\r\n\r\n        db['Purchases'] = purchases_dict\r\n\r\n        db.close()\r\n\r\n        return redirect(url_for('success2'))\r\n\r\n    return render_template('checkout2.html', form=create_checkout_form2)\r\n\r\n\r\n@app.route('/purchaseManagement')\r\ndef purchase_management():\r\n    purchases_dict = {}\r\n    db = shelve.open('purchase.db', 'r')\r\n    purchases_dict = db['Purchases']\r\n    db.close()\r\n\r\n    purchases_list = []\r\n    for key in purchases_dict:\r\n        purchase = purchases_dict.get(key)\r\n        purchases_list.append(purchase)\r\n\r\n    return render_template('purchaseManagement.html', count=len(purchases_list), purchases_list=purchases_list)\r\n\r\n\r\n@app.route('/updatePurchase/<int:id>/', methods=['GET', 'POST'])\r\ndef update_purchase(id):\r\n    update_checkout_form2 = CreateUpdateForm2(request.form)\r\n    if request.method == 'POST' and update_checkout_form2.validate():\r\n        purchases_dict = {}\r\n        db = shelve.open('purchase.db', 'w')\r\n        purchases_dict = db['Purchases']\r\n\r\n        purchase = purchases_dict.get(id)\r\n        purchase.set_fname(update_checkout_form2.fname.data)\r\n        purchase.set_lname(update_checkout_form2.lname.data)\r\n        purchase.set_phone(update_checkout_form2.phone.data)\r\n        purchase.set_email(update_checkout_form2.email.data)\r\n        purchase.set_add1(update_checkout_form2.add1.data)\r\n        purchase.set_add2(update_checkout_form2.add2.data)\r\n        purchase.set_pcode(update_checkout_form2.pcode.data)\r\n        purchase.set_dmethod(update_checkout_form2.dmethod.data)\r\n\r\n        db['Purchases'] = purchases_dict\r\n        db.close()\r\n\r\n        return redirect(url_for('purchase_management'))\r\n    else:\r\n        purchases_dict = {}\r\n        db = shelve.open('purchase.db', 'r')\r\n        purchases_dict = db['Purchases']\r\n        db.close()\r\n\r\n        purchase = purchases_dict.get(id)\r\n        update_checkout_form2.fname.data = purchase.get_fname()\r\n        update_checkout_form2.lname.data = purchase.get_lname()\r\n        update_checkout_form2.phone.data = purchase.get_phone()\r\n        update_checkout_form2.email.data = purchase.get_email()\r\n        update_checkout_form2.add1.data = purchase.get_add1()\r\n        update_checkout_form2.add2.data = purchase.get_add2()\r\n        update_checkout_form2.pcode.data = purchase.get_pcode()\r\n        update_checkout_form2.dmethod.data = purchase.get_dmethod()\r\n\r\n    return render_template('updatePurchase.html', form=update_checkout_form2)\r\n\r\n\r\n@app.route('/deletePurchase/<int:id>', methods=['POST'])\r\ndef delete_purchase(id):\r\n    purchases_dict = {}\r\n    db = shelve.open('purchase.db', 'w')\r\n    purchases_dict = db['Purchases']\r\n\r\n    purchases_dict.pop(id)\r\n\r\n    db['Purchases'] = purchases_dict\r\n    db.close()\r\n\r\n    return redirect(url_for('purchase_management'))\r\n\r\n\r\nif __name__ == '__main__':\r\n    create_app()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/__init__.py b/__init__.py
--- a/__init__.py	(revision 9f87c590ee37b30535a7f4ac1499559fb6e6aefe)
+++ b/__init__.py	(date 1707729816166)
@@ -7,8 +7,8 @@
 from werkzeug.utils import secure_filename
 import os, shelve, Response, eventManagement, Purchase, userEvents
 from Forms import CreateCheckoutForm, CreateUpdateForm, CreateProductForm, CreateReviewForm, CreateEventForm, \
-    CheckInForm, CreateUpdateForm2, CreateCheckoutForm2, RegsisterForm
-import Review, Cart, Store, Product
+    CheckInForm, CreateUpdateForm2, CreateCheckoutForm2, RegsisterForm, CreateReplyForm
+import Review, Cart, Store, Product, Reply
 
 app = Flask(__name__)
 
@@ -272,7 +272,7 @@
 
 
 @app.route('/review')
-def reply_review():
+def view_user_review():
     reviews_dict = {}
     db = shelve.open('review.db', 'r')
     reviews_dict = db['Reviews']
@@ -282,7 +282,96 @@
         review = reviews_dict.get(key)
         reviews_list.append(review)
 
-    return render_template('productmanagement.html', count=len(reviews_list), reviews_list=reviews_list)
+    return render_template('reviewManagement.html', count=len(reviews_list), reviews_list=reviews_list)
+
+@app.route('/createReply', methods=['GET', 'POST'])
+def create_reply():
+    create_reply_form = CreateReplyForm(request.form)
+
+    if request.method == 'POST' and create_reply_form.validate():
+        replys_dict = {}
+        db = shelve.open('reply.db', 'c')
+
+        try:
+            replys_dict = db['Replys']
+        except:
+            print("Error in retrieving Replies from reply.db.")
+
+        reply = Reply.Reply(create_reply_form.customer_name.data, create_reply_form.product_name.data,create_reply_form.email.data,
+                               create_reply_form.reply_date.data, create_reply_form.comments.data)
+        replys_dict[reply.get_reply_id()] = reply
+        db['Replys'] = replys_dict
+
+        db.close()
+
+        return redirect(url_for('view_replys'))
+
+    return render_template('createReply.html', form=create_reply_form)
+
+@app.route('/viewReplys')
+def view_replys():
+    reviews_dict = {}
+    db = shelve.open('reply.db', 'r')
+    replys_dict = db['Replys']
+    db.close()
+    replys_list = []
+    for key in replys_dict:
+       reply = replys_dict.get(key)
+       replys_list.append(reply)
+
+    return render_template('viewReplys.html', count=len(replys_list), replys_list=replys_list)
+
+@app.route('/updateReply/<int:id>/', methods=['GET', 'POST'])
+def update_reply(id):
+    update_reply_form = CreateReplyForm(request.form)
+
+    if request.method == 'POST' and update_reply_form.validate():
+        replys_dict = {}
+        db = shelve.open('reply.db', 'w')
+        replys_dict = db['Replys']
+
+        reply = replys_dict.get(id)
+        reply.set_customer_name(update_reply_form.customer_name.data)
+        reply.set_product_name(update_reply_form.product_name.data)
+        reply.set_email(update_reply_form.email.data)
+        reply.set_reply_date(update_reply_form.reply_date.data)
+        reply.set_comments(update_reply_form.comments.data)
+
+        db['Replys'] = replys_dict
+        db.close()
+
+        return redirect(url_for('view_replys'))
+    else:
+        replys_dict = {}
+        db = shelve.open('reply.db', 'r')
+        replys_dict = db['Replys']
+        db.close()
+
+        reply = replys_dict.get(id)
+        update_reply_form.customer_name.data = reply.get_customer_name()
+        update_reply_form.product_name.data = reply.get_product_name()
+        update_reply_form.email.data = reply.get_email()
+        update_reply_form.reply_date.data = reply.get_reply_date()
+        update_reply_form.comments.data = reply.get_comments()
+
+        return render_template('updateReply.html', form=update_reply_form)
+
+@app.route('/deleteReply/<int:id>', methods=['POST'])
+def delete_reply(id):
+    replys_dict = {}
+    db = shelve.open('reply.db', 'w')
+    reviews_dict = db.get('Replys', {})
+
+    reviews_dict.pop(id)
+
+    db['Replys'] = replys_dict
+
+    db.close()
+
+    return redirect(url_for('view_replys'))
+
+
+
 
 
 # Event management - Admin
Index: templates/createReview.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><link rel=\"stylesheet\" type=\"text/css\" href=\"../static/css/createReviews.css\">\r\n{% extends \"base.html\" %}\r\n{% block title %}Library Loan System - Create Review{% endblock %}\r\n{% block content %}\r\n  {% from \"includes/_formHelper.html\" import render_field %}\r\n<div class=\"container\">\r\n  <h1 class=\"display-4\">Create Review</h1>\r\n\r\n  <form method=\"POST\" action=\"\" class=\"form\">\r\n    <div class=\"form-group\">\r\n      {{ render_field(form.customer_name, class=\"form-control\") }}\r\n    </div>\r\n    <div class=\"form-group\">\r\n      {{ render_field(form.product_name, class=\"form-control\") }}\r\n    </div>\r\n    <div class=\"form-group\">\r\n      {{ render_field(form.rating, class=\"form-control\") }}\r\n    </div>\r\n    <div class=\"form-group\">\r\n      {{ render_field(form.email, class=\"form-control\") }}\r\n    </div>\r\n    <div class=\"form-group\">\r\n      {{ render_field(form.review_date, class=\"form-control datepicker\") }}\r\n    </div>\r\n    <div class=\"form-group\">\r\n      {{ render_field(form.comments, class=\"form-control\") }}\r\n    </div>\r\n    <input type=\"submit\" value=\"Submit\" class=\"btn btn-primary\"/>\r\n  </form>\r\n</div>\r\n{% endblock %}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/createReview.html b/templates/createReview.html
--- a/templates/createReview.html	(revision 9f87c590ee37b30535a7f4ac1499559fb6e6aefe)
+++ b/templates/createReview.html	(date 1707728685904)
@@ -6,7 +6,7 @@
 <div class="container">
   <h1 class="display-4">Create Review</h1>
 
-  <form method="POST" action="" class="form">
+  <form method="POST" action="" class="form123">
     <div class="form-group">
       {{ render_field(form.customer_name, class="form-control") }}
     </div>
Index: templates/base2.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html><!-- Admin side -->\r\n<head>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../static/css/cart.css\">\r\n    <title>VegeGrove</title>\r\n    <meta charset=\"utf-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\r\n  <title>{% block title %}VegeGrove{% endblock %}</title>\r\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css\">\r\n  <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='/css/styleadmin.css') }}\">\r\n</head>\r\n<body>\r\n  <nav class=\"navbar navbar-inverse\">\r\n    <div class=\"container-fluid\">\r\n      <div class=\"navbar-header\">\r\n        <a class=\"navbar-brand\" href=\"/\">VegeGrove</a>\r\n      </div>\r\n      <ul class=\"nav navbar-nav\">\r\n        <li><a href=\"{{ url_for('admin.homepage')}}\" class=\"active\">Home</a></li>\r\n            <li><a href=\"{{ url_for('admin.create_user') }}\">Create Company</a></li>\r\n            <li><a href=\"/retrieveCompany\">Retrieve Company</a></li>\r\n      </ul>\r\n      <ul>\r\n        <li class=\"dropdown\"><a class=\"dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\">Review <span class=\"caret\"></span></a>\r\n          <ul class=\"dropdown-menu\">\r\n              <li><a href=\"{{url_for('reply_review')}}\">View Reviews</a></li>\r\n              <li><a href=\"{{url_for('create_reply')}}\">Create Reply</a></li>\r\n              <li><a href=\"{{url_for('view_replys')}}\">View Replies</a></li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n      <ul class=\"nav navbar-nav navbar-right\">\r\n        <li>\r\n          <div class=\"user\">\r\n          <a href=\"#\"><span class=\"glyphicon glyphicon-user\" onclick=\"toggleuser()\"></span> </a>\r\n            <div id=\"userApplet\" class=\"user-applet\">\r\n              <h3 style=\"display: inline\">Profile</h3>\r\n                <div class=\"user-item\">\r\n                  <button class=\"logout\" onclick=\"logout()\"><span class=\"glyphicon glyphicon-log-in\"></span>Logout</button>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n\r\n    <script>\r\n         function logout() {\r\n            // Add any logout logic or redirect here\r\n            window.location.href = \"{{ url_for('auth.logout') }}\";\r\n        }\r\n\r\n        function toggleuser() {\r\n            var userApplet = document.getElementById('userApplet');\r\n            userApplet.style.display = (userApplet.style.display === 'block') ? 'none' : 'block';\r\n        }\r\n    </script>\r\n</div>\r\n  </header>\r\n\r\n\r\n  {% block content %}\r\n\r\n\r\n\r\n  {% endblock %}\r\n</body>\r\n\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/base2.html b/templates/base2.html
--- a/templates/base2.html	(revision 9f87c590ee37b30535a7f4ac1499559fb6e6aefe)
+++ b/templates/base2.html	(date 1707727080754)
@@ -26,9 +26,7 @@
       <ul>
         <li class="dropdown"><a class="dropdown-toggle" data-toggle="dropdown" href="#">Review <span class="caret"></span></a>
           <ul class="dropdown-menu">
-              <li><a href="{{url_for('reply_review')}}">View Reviews</a></li>
-              <li><a href="{{url_for('create_reply')}}">Create Reply</a></li>
-              <li><a href="{{url_for('view_replys')}}">View Replies</a></li>
+              <li><a href="{{url_for('view_user_review')}}">View Reviews</a></li>
           </ul>
         </li>
       </ul>
Index: static/css/createReply.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/static/css/createReply.css b/static/css/createReply.css
new file mode 100644
--- /dev/null	(date 1707728685918)
+++ b/static/css/createReply.css	(date 1707728685918)
@@ -0,0 +1,13 @@
+.form13{
+     max-width: 500px;
+     align-item:center;
+     margin: 0 auto ;
+     box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
+     padding: 10px;
+     border-radius: 8px;
+     background-color: #EEEEEE;
+}
+
+.display-4{
+    text-align: center;
+}
\ No newline at end of file
Index: templates/reviewsManagement.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/reviewsManagement.html b/templates/reviewsManagement.html
new file mode 100644
--- /dev/null	(date 1707726179194)
+++ b/templates/reviewsManagement.html	(date 1707726179194)
@@ -0,0 +1,48 @@
+{% extends "base3.html" %}
+{% block title %}Library Loan System - Retrieve Reviews{% endblock %}
+
+{% block content %}
+<body>
+    <h1 class="display-4">Reviews</h1>
+    <div>
+        {% if count == 0 %}
+            <p>There are no reviews.</p>
+        {% elif count == 1 %}
+            <p>There is 1 review.</p>
+        {% else %}
+            <p>There are {{ count }} reviews.</p>
+        {% endif %}
+    </div>
+    <div>
+        <table class="table table-striped">
+            <thead>
+                <tr>
+                    <th>Review ID</th>
+                    <th>Customer Name</th>
+                    <th>Product Name</th>
+                    <th>Rating</th>
+                    <th>Email</th>
+                    <th>Review Date</th>
+                    <th>Comments</th>
+                    <th></th>
+                    <th></th>
+                </tr>
+            </thead>
+            <tbody>
+                {% for review in reviews_list %}
+                    <tr>
+                        <td>{{ review.get_review_id() }}</td>
+                        <td>{{ review.get_customer_name() }}</td>
+                        <td>{{ review.get_product_name() }}</td>
+                        <td>{{ review.get_rating() }}</td>
+                        <td>{{ review.get_email() }}</td>
+                        <td>{{ review.get_review_date() }}</td>
+                        <td>{{ review.get_comments() }}</td>
+                        <td><a href="/createReply" class="btn btn-warning">Create Review</a></td>
+                    </tr>
+                {% endfor %}
+            </tbody>
+        </table>
+    </div>
+</body>
+{% endblock %}
Index: Forms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from wtforms import (Form, StringField, RadioField, SelectField, TextAreaField, validators, PasswordField, IntegerField,\r\n                     FloatField)\r\nfrom wtforms.fields import TimeField, IntegerField\r\nfrom wtforms.fields import DateField\r\nfrom wtforms.fields import EmailField, DateField\r\nfrom wtforms.validators import DataRequired, Length, ValidationError\r\n\r\n\r\nclass CreateCompanyForm(Form):\r\n    company_name = StringField('Company Name', [validators.Length(min=1, max=150), validators.DataRequired()])\r\n    email = EmailField('Email', [validators.Length(min=1, max=150), validators.DataRequired()])\r\n    date_joined = DateField('Date Joined', format='%Y-%m-%d')\r\n    address = StringField('Address', [validators.length(max=200), validators.DataRequired()])\r\n    password = PasswordField('Password', [validators.Optional()])\r\n\r\n\r\n# Admin side (Events)\r\nclass CreateReviewForm(Form):\r\n    customer_name = StringField('Customer Name', [validators.Length(min=1, max=150), validators.DataRequired(),\r\n                                                  validators.Regexp(r'^[A-Za-z ]*$',\r\n                                                                    message=\"Please enter only letters.\")])\r\n    product_name = SelectField('Product Name',\r\n                               choices=[('', 'Select'), ('Tomato Seed', 'Tomato Seed'), ('Potato Seed', 'Potato Seed')],\r\n                               default='', validators=[validators.InputRequired()])\r\n    rating = IntegerField('Rating', [validators.NumberRange(min=1, max=5), validators.DataRequired()])\r\n    email = EmailField('Email', [validators.Email(), validators.DataRequired()])\r\n    review_date = DateField('Review Date', format='%Y-%m-%d')\r\n    comments = TextAreaField('Comments', [validators.Length(min=1, max=500), validators.DataRequired()])\r\n\r\n\r\n# User side (Events)\r\nclass CheckInForm(Form):\r\n    name = StringField('Name: ', [validators.DataRequired(message=\"Please enter your full name\")],\r\n                       render_kw={\"placeholder\": \"Eg. Angeline Tan\"})\r\n    email = EmailField('Email: ', [validators.DataRequired(message=\"Please enter your email address\")],\r\n                       render_kw={\"placeholder\": \"Eg. angelinetan123@gmail.com\"})\r\n\r\n    def validate_name(self, name):\r\n        excluded_chars = \"*?!'^+%&/()=}][{$#1234567890\"\r\n        for char in name.data:\r\n            if char in excluded_chars:\r\n                raise ValidationError('Name can only contain alphabets')\r\n\r\n    def validate_email(self, email):\r\n        excluded_chars = \"*?!'^+%&/()={}[]$#\"\r\n        for char in email.data:\r\n            if char in excluded_chars:\r\n                raise ValidationError(\"Invalid Email\")\r\nclass RegsisterForm(Form):\r\n    name = StringField('Name: ', [validators.DataRequired(message=\"Please enter your full name\")],\r\n                       render_kw={\"placeholder\": \"Eg. Angeline Tan\"})\r\n    email = EmailField('Email: ', [validators.DataRequired(message=\"Please enter your email address\")],\r\n                       render_kw={\"placeholder\": \"Eg. angelinetan123@gmail.com\"})\r\n\r\n\r\n    def validate_name(self, name):\r\n        excluded_chars = \"*?!'^+%&/()=}][{$#1234567890\"\r\n        for char in name.data:\r\n            if char in excluded_chars:\r\n                raise ValidationError('Name can only contain alphabets')\r\n\r\n    def validate_email(self, email):\r\n        excluded_chars = \"*?!'^+%&/()={}[]$#\"\r\n        for char in email.data:\r\n            if char in excluded_chars:\r\n                raise ValidationError(\"Invalid Email\")\r\n\r\nclass CreateCheckoutForm(Form):\r\n    amount = IntegerField('You are donating a total of', render_kw={\"readonly\": True})\r\n\r\n    fname = StringField('First Name', [validators.DataRequired()])\r\n\r\n    lname = StringField('Last Name', [validators.DataRequired()])\r\n\r\n    phone = StringField('Phone Number', [validators.Length(min=8, max=8), DataRequired()],\r\n                        render_kw={\"placeholder\": \"8 Digit Phone Number\"})\r\n\r\n    email = EmailField('Email Address', [validators.DataRequired()], render_kw={\"placeholder\": \"Example@gmail.com\"})\r\n\r\n    add1 = StringField('Address Line 1', [validators.DataRequired()],\r\n                       render_kw={\"placeholder\": \"Street\"})\r\n\r\n    add2 = StringField('Address Line 2', [validators.DataRequired()],\r\n                       render_kw={\"placeholder\": \"Block & Unit Number\"})\r\n\r\n    pcode = StringField('Postal Code', [validators.Length(min=6, max=6), DataRequired()],\r\n                        render_kw={\"placeholder\": \"6 Digit Postal Code\"})\r\n\r\n    dmethod = RadioField('Delivery Method', [validators.DataRequired()],\r\n                         choices=[('S', 'Standard (2-8 Business days)'), ('E', 'Express (1 Business day)')],\r\n                         default='Select')\r\n\r\n    cname = StringField('Full Name on Card', [validators.DataRequired()])\r\n\r\n    cnum = StringField('Card Number', [validators.Length(min=16, max=16), DataRequired()],\r\n                       render_kw={\"placeholder\": \"XXXX XXXX XXXX XXXX\"})\r\n\r\n    edate = DateField('Expiry Date', [validators.DataRequired()])\r\n\r\n    cvc = StringField('CVC', [validators.Length(min=3, max=3), DataRequired()],\r\n                      render_kw={\"placeholder\": \"3 Digit CVC\"})\r\n\r\nclass CreateCheckoutForm2(Form):\r\n        amount = IntegerField('You are purchasing a total of', render_kw={\"readonly\": True})\r\n\r\n        fname = StringField('First Name', [validators.DataRequired()])\r\n\r\n        lname = StringField('Last Name', [validators.DataRequired()])\r\n\r\n        phone = StringField('Phone Number', [validators.Length(min=8, max=8), DataRequired()],\r\n                            render_kw={\"placeholder\": \"8 Digit Phone Number\"})\r\n\r\n        email = EmailField('Email Address', [validators.DataRequired()], render_kw={\"placeholder\": \"Example@gmail.com\"})\r\n\r\n        add1 = StringField('Address Line 1', [validators.DataRequired()],\r\n                           render_kw={\"placeholder\": \"Street\"})\r\n\r\n        add2 = StringField('Address Line 2', [validators.DataRequired()],\r\n                           render_kw={\"placeholder\": \"Block & Unit Number\"})\r\n\r\n        pcode = StringField('Postal Code', [validators.Length(min=6, max=6), DataRequired()],\r\n                            render_kw={\"placeholder\": \"6 Digit Postal Code\"})\r\n\r\n        dmethod = RadioField('Delivery Method', [validators.DataRequired()],\r\n                             choices=[('S', 'Standard (2-8 Business days)'), ('E', 'Express (1 Business day)')],\r\n                             default='Select')\r\n\r\n        cname = StringField('Full Name on Card', [validators.DataRequired()])\r\n\r\n        cnum = StringField('Card Number', [validators.Length(min=16, max=16), DataRequired()],\r\n                           render_kw={\"placeholder\": \"XXXX XXXX XXXX XXXX\"})\r\n\r\n        edate = DateField('Expiry Date', [validators.DataRequired()])\r\n\r\n        cvc = StringField('CVC', [validators.Length(min=3, max=3), DataRequired()],\r\n                          render_kw={\"placeholder\": \"3 Digit CVC\"})\r\nclass CreateUpdateForm2(Form):\r\n            fname = StringField('First Name', [validators.DataRequired()])\r\n\r\n            lname = StringField('Last Name', [validators.DataRequired()])\r\n\r\n            phone = StringField('Phone Number', [validators.Length(min=8, max=8), DataRequired()],\r\n                                render_kw={\"placeholder\": \"8 Digit Phone Number\"})\r\n\r\n            email = EmailField('Email Address', [validators.DataRequired()],\r\n                               render_kw={\"placeholder\": \"Example@gmail.com\"})\r\n\r\n            add1 = StringField('Address Line 1', [validators.DataRequired()],\r\n                               render_kw={\"placeholder\": \"Street\"})\r\n\r\n            add2 = StringField('Address Line 2', [validators.DataRequired()],\r\n                               render_kw={\"placeholder\": \"Block & Unit Number\"})\r\n\r\n            pcode = StringField('Postal Code', [validators.Length(min=6, max=6), DataRequired()],\r\n                                render_kw={\"placeholder\": \"6 Digit Postal Code\"})\r\n\r\n            dmethod = RadioField('Delivery Method', [validators.DataRequired()],\r\n                                 choices=[('S', 'Standard (2-8 Business days)'), ('E', 'Express (1 Business day)')],\r\n                                 default='Select')\r\n\r\n\r\nclass CreateUpdateForm(Form):\r\n    fname = StringField('First Name', [validators.DataRequired()])\r\n\r\n    lname = StringField('Last Name', [validators.DataRequired()])\r\n\r\n    phone = StringField('Phone Number', [validators.Length(min=8, max=8), DataRequired()],\r\n                        render_kw={\"placeholder\": \"8 Digit Phone Number\"})\r\n\r\n    email = EmailField('Email Address', [validators.DataRequired()], render_kw={\"placeholder\": \"Example@gmail.com\"})\r\n\r\n    add1 = StringField('Address Line 1', [validators.DataRequired()],\r\n                       render_kw={\"placeholder\": \"Street\"})\r\n\r\n    add2 = StringField('Address Line 2', [validators.DataRequired()],\r\n                       render_kw={\"placeholder\": \"Block & Unit Number\"})\r\n\r\n    pcode = StringField('Postal Code', [validators.Length(min=6, max=6), DataRequired()],\r\n                        render_kw={\"placeholder\": \"6 Digit Postal Code\"})\r\n\r\n    dmethod = RadioField('Delivery Method', [validators.DataRequired()],\r\n                         choices=[('S', 'Standard (2-8 Business days)'), ('E', 'Express (1 Business day)')],\r\n                         default='Select')\r\n\r\n\r\nclass CreateProductForm(Form):\r\n    name = StringField('Name', [validators.DataRequired()])\r\n\r\n    price = FloatField('Price', [validators.DataRequired()])\r\n\r\n    description = TextAreaField('Description', [validators.DataRequired()],\r\n                                render_kw={\"placeholder\": \"Describe the product...\"})\r\n    tags = RadioField('Type', [validators.DataRequired()], choices=[('S', 'Seed'), ('F', 'Fertiliser')],\r\n                      default='Select')\r\n\r\n\r\nclass CreateEventForm(Form):\r\n    name = StringField('Name: ', [validators.DataRequired()])\r\n    timing = TimeField('Timing: ', [validators.DataRequired()])\r\n    location = StringField('Location: ', [validators.DataRequired()])\r\n    date = DateField('Date: ', [validators.DataRequired()])\r\n    description = TextAreaField('Description: ', [validators.Optional()])\r\n    person_in_charge = StringField(\"Person-In-Charge: \")\r\n    budget = IntegerField(\"Budget($): \", [validators.NumberRange(min=0)])\r\n    collaborators = StringField(\"Collaborators: \")\r\n\r\n    def validate_name(self, name):\r\n        excluded_chars = \"*?!'^+%&/()=}][{$#1234567890\"\r\n        for char in name.data:\r\n            if char in excluded_chars:\r\n                raise ValidationError('Event name can only contain alphabets')\r\n\r\n    def validate_collaborators(self, collaborators):\r\n        excluded_chars = \"*?!'^+%&/()=}][{$#\"\r\n        for char in collaborators.data:\r\n            if char in excluded_chars:\r\n                raise ValidationError('Collaborators can only contain alphanumeric values')\r\n\r\n    def validate_person_in_charge(self, person_in_charge):\r\n        excluded_chars = \"*?!'^+%&/()=}][{$#\"\r\n        for char in person_in_charge.data:\r\n            if char in excluded_chars:\r\n                raise ValidationError('Person-In-Charge must only contain alphanumeric values')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Forms.py b/Forms.py
--- a/Forms.py	(revision 9f87c590ee37b30535a7f4ac1499559fb6e6aefe)
+++ b/Forms.py	(date 1707726573649)
@@ -2,7 +2,7 @@
                      FloatField)
 from wtforms.fields import TimeField, IntegerField
 from wtforms.fields import DateField
-from wtforms.fields import EmailField, DateField
+from wtforms.fields.html5 import EmailField, DateField
 from wtforms.validators import DataRequired, Length, ValidationError
 
 
@@ -26,6 +26,13 @@
     email = EmailField('Email', [validators.Email(), validators.DataRequired()])
     review_date = DateField('Review Date', format='%Y-%m-%d')
     comments = TextAreaField('Comments', [validators.Length(min=1, max=500), validators.DataRequired()])
+
+class CreateReplyForm(Form):
+    customer_name = StringField('Customer Name', [validators.Length(min=1, max=150), validators.DataRequired()])
+    product_name = SelectField('Product Name', choices=[('', 'Select'), ('Tomato Seed', 'Tomato Seed'), ('Potato Seed', 'Potato Seed')], default='', validators=[validators.InputRequired()])
+    email = EmailField('Email', [validators.Email(), validators.DataRequired()])
+    reply_date = DateField('Reply Date', format='%Y-%m-%d')
+    comments = TextAreaField('Comments', [validators.Length(min=1, max=500), validators.DataRequired()])
 
 
 # User side (Events)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"0032cba9-b607-4fbb-9984-15f68861d9f3\" name=\"Changes\" comment=\"url\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/__init__.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/__init__.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/templates/retrieveUserEvents.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/templates/retrieveUserEvents.html\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n        <option value=\"HTML File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;5h1q1&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"c5fceae3-8479-423f-a5d1-aea7c642c450\" />\r\n        <option name=\"url\" value=\"https://github.com/aikyh/aikyh.github.io.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2bcyFsvgmaUVoxYO9x2uiqzjQZu\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;DefaultHtmlFileTemplate&quot;: &quot;HTML File&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/yitin/Downloads/aikyh.github.io/static/css&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\yitin\\Downloads\\aikyh.github.io\\static\\css\" />\r\n      <recent name=\"C:\\Users\\yitin\\Downloads\\aikyh.github.io\\static\\img\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\leesh\\OneDrive\\Desktop\\PycharmProjects\\appdevgroupproj\\aikyh.github.io\\static\\css\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"0032cba9-b607-4fbb-9984-15f68861d9f3\" name=\"Changes\" comment=\"\" />\r\n      <created>1706528560294</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1706528560294</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00050\" summary=\"idk\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707400749791</created>\r\n      <option name=\"number\" value=\"00050\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00050\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707400749792</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00051\" summary=\"idk\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707401077820</created>\r\n      <option name=\"number\" value=\"00051\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00051\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707401077820</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00052\" summary=\"idk\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707403212554</created>\r\n      <option name=\"number\" value=\"00052\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00052\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707403212554</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00053\" summary=\"idk\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707407853560</created>\r\n      <option name=\"number\" value=\"00053\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00053\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707407853562</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00054\" summary=\"idk\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707408622903</created>\r\n      <option name=\"number\" value=\"00054\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00054\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707408622903</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00055\" summary=\"idk\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707408786152</created>\r\n      <option name=\"number\" value=\"00055\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00055\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707408786152</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00056\" summary=\"idk\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707408960940</created>\r\n      <option name=\"number\" value=\"00056\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00056\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707408960940</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00057\" summary=\"idk\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707409534843</created>\r\n      <option name=\"number\" value=\"00057\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00057\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707409534843</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00058\" summary=\"idk\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707409907597</created>\r\n      <option name=\"number\" value=\"00058\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00058\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707409907597</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00059\" summary=\"idk\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707411415967</created>\r\n      <option name=\"number\" value=\"00059\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00059\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707411415967</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00060\" summary=\"idk\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707411979724</created>\r\n      <option name=\"number\" value=\"00060\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00060\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707411979724</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00061\" summary=\"adding new stuff\">\r\n      <created>1707473436341</created>\r\n      <option name=\"number\" value=\"00061\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00061\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707473436342</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00062\" summary=\"comitting\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707491558573</created>\r\n      <option name=\"number\" value=\"00062\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00062\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707491558573</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00063\" summary=\"comitting\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707491565743</created>\r\n      <option name=\"number\" value=\"00063\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00063\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707491565743</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00064\" summary=\"comitting\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707491654533</created>\r\n      <option name=\"number\" value=\"00064\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00064\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707491654533</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00065\" summary=\"comitting\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707491994729</created>\r\n      <option name=\"number\" value=\"00065\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00065\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707491994729</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00066\" summary=\"commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707636453294</created>\r\n      <option name=\"number\" value=\"00066\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00066\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707636453294</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00067\" summary=\"commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707644639141</created>\r\n      <option name=\"number\" value=\"00067\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00067\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707644639141</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00068\" summary=\"shiqi\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707659593347</created>\r\n      <option name=\"number\" value=\"00068\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00068\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707659593347</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00069\" summary=\"shiqi\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707659747976</created>\r\n      <option name=\"number\" value=\"00069\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00069\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707659747976</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00070\" summary=\"shiqi\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707659933201</created>\r\n      <option name=\"number\" value=\"00070\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00070\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707659933201</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00071\" summary=\"shiqi files\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707660321284</created>\r\n      <option name=\"number\" value=\"00071\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00071\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707660321284</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00072\" summary=\"shiqi files\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707660482364</created>\r\n      <option name=\"number\" value=\"00072\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00072\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707660482364</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00073\" summary=\"shiqi files\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707660582377</created>\r\n      <option name=\"number\" value=\"00073\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00073\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707660582377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00074\" summary=\"shiqi files\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707661142163</created>\r\n      <option name=\"number\" value=\"00074\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00074\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707661142163</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00075\" summary=\"shiqi files\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707661251806</created>\r\n      <option name=\"number\" value=\"00075\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00075\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707661251806</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00076\" summary=\"yt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707662273385</created>\r\n      <option name=\"number\" value=\"00076\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00076\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707662273385</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00077\" summary=\"yt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707662412122</created>\r\n      <option name=\"number\" value=\"00077\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00077\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707662412122</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00078\" summary=\"yt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707662515530</created>\r\n      <option name=\"number\" value=\"00078\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00078\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707662515530</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00079\" summary=\"yt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707662583566</created>\r\n      <option name=\"number\" value=\"00079\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00079\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707662583566</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00080\" summary=\"yt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707662937391</created>\r\n      <option name=\"number\" value=\"00080\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00080\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707662937391</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00081\" summary=\"yt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707663224712</created>\r\n      <option name=\"number\" value=\"00081\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00081\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707663224712</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00082\" summary=\"yt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707663279472</created>\r\n      <option name=\"number\" value=\"00082\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00082\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707663279472</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00083\" summary=\"yt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707663464319</created>\r\n      <option name=\"number\" value=\"00083\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00083\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707663464319</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00084\" summary=\"yt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707663618140</created>\r\n      <option name=\"number\" value=\"00084\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00084\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707663618140</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00085\" summary=\"yt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707663788628</created>\r\n      <option name=\"number\" value=\"00085\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00085\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707663788628</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00086\" summary=\"yt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707663856981</created>\r\n      <option name=\"number\" value=\"00086\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00086\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707663856981</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00087\" summary=\"yt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707664438956</created>\r\n      <option name=\"number\" value=\"00087\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00087\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707664438956</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00088\" summary=\"yt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707664472270</created>\r\n      <option name=\"number\" value=\"00088\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00088\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707664472270</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00089\" summary=\"url\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707664531135</created>\r\n      <option name=\"number\" value=\"00089\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00089\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707664531135</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00090\" summary=\"url\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707664630096</created>\r\n      <option name=\"number\" value=\"00090\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00090\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707664630096</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00091\" summary=\"url\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707668026195</created>\r\n      <option name=\"number\" value=\"00091\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00091\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707668026195</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00092\" summary=\"url\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707669172676</created>\r\n      <option name=\"number\" value=\"00092\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00092\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707669172676</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00093\" summary=\"url\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707669488566</created>\r\n      <option name=\"number\" value=\"00093\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00093\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707669488566</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00094\" summary=\"url\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707670022330</created>\r\n      <option name=\"number\" value=\"00094\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00094\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707670022330</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00095\" summary=\"url\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707670094464</created>\r\n      <option name=\"number\" value=\"00095\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00095\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707670094464</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00096\" summary=\"url\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707670130557</created>\r\n      <option name=\"number\" value=\"00096\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00096\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707670130557</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00097\" summary=\"url\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707670478758</created>\r\n      <option name=\"number\" value=\"00097\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00097\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707670478758</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00098\" summary=\"url\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707719340993</created>\r\n      <option name=\"number\" value=\"00098\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00098\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707719340993</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"99\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"idk\" />\r\n    <MESSAGE value=\"adding new stuff\" />\r\n    <MESSAGE value=\"comitting\" />\r\n    <MESSAGE value=\"commit\" />\r\n    <MESSAGE value=\"shiqi\" />\r\n    <MESSAGE value=\"shiqi files\" />\r\n    <MESSAGE value=\"yt\" />\r\n    <MESSAGE value=\"url\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"url\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 9f87c590ee37b30535a7f4ac1499559fb6e6aefe)
+++ b/.idea/workspace.xml	(date 1707728686315)
@@ -5,9 +5,14 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="0032cba9-b607-4fbb-9984-15f68861d9f3" name="Changes" comment="url">
+      <change afterPath="$PROJECT_DIR$/static/css/createReply.css" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/templates/reviewsManagement.html" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Forms.py" beforeDir="false" afterPath="$PROJECT_DIR$/Forms.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/__init__.py" beforeDir="false" afterPath="$PROJECT_DIR$/__init__.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/templates/retrieveUserEvents.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/retrieveUserEvents.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/templates/base2.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/base2.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/templates/base3.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/base3.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/templates/createReview.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/createReview.html" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
